buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		// List any other maven repositories here
	}
}

// This must be at the top of the file (only can be below buildscript)
plugins {
	id "com.github.hierynomus.license" version "0.13.1"
}

apply plugin: "maven"
apply plugin: "java"
apply plugin: "findbugs"
apply plugin: "checkstyle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenLocal()
	mavenCentral()
	// List any other maven repositories here
}

ext {
	findbugsVersion = "3.0.0"
	junitVersion = "4.11"
	slf4jVersion = "1.7.25"
	commonCsvVersion = "1.3"
	guavaVersion = "18.0"
	commonsCsvVersion = "1.4"
	commonsVersion = "2.5"
	reflectionsVersion = "0.9.10"
	lvgVersion = "2017.0"

	// Parameters
	if (!project.hasProperty('param1')) {
		param1 = "na"
	}
}

license {
	header rootProject.file('LICENSE')
	mapping('java', 'SLASHSTAR_STYLE')
	includes(["**/*.java"])
	excludes(["**/*.txt", "**/*.conf", "**/*package-info.java", "**/*.properties"])
	strictCheck true
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	ext.company = "Ciitizen, Inc."
}

findbugs {
	toolVersion = "$findbugsVersion"
	excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

checkstyle {
	// config = resources.text.fromFile(file("${project.rootDir}/config/checkstyle/checkstyle.xml"))
	toolVersion = "7.6.1"
	ignoreFailures = "false"
	checkstyleMain.exclude '**/package-info.java'
	checkstyleTest.exclude '**/package-info.java'
	// checkstyleIntegrationTest.exclude '**/package-info.java'
	configProperties = [
		'checkstyle.cache.file'         : rootProject.file('.out/checkstyle/checkstyle.cache'),
		'checkstyle.suppressions.file'  : rootProject.file('config/checkstyle/suppressions.xml'),
		'checkstyle.header.file'       : '',
		'checkstyle.regexp.header.file' : '',
		'checkstyle.importcontrol.file' : ''
	]
}

tasks.withType(Checkstyle) {
	ignoreFailures = false
	reports {
		xml.enabled = true
		html.enabled = false
		//html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
	}
}

dependencies {
	// Common libraries
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
	compile "org.apache.commons:commons-csv:$commonsCsvVersion"
	compile "com.google.guava:guava:$guavaVersion"
	compile "org.reflections:reflections:$reflectionsVersion"
	compile "commons-io:commons-io:$commonsVersion"
	compile "gov.nih.nlm.nls.lvg:lvgdist:$lvgVersion"

	// Tensorflow
	compile "org.tensorflow:tensorflow:1.3.0"
	compile "org.apache.lucene:lucene-snowball:3.0.3"

	// JUnit
	testCompile "junit:junit:$junitVersion"
		
	// Local projects
	

}

test {
	testLogging {
			showStandardStreams = true
	}
	minHeapSize = "512m"
	maxHeapSize = "1024m"
	exclude ''
}

task runtest(type:JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'com.ciitizen.TestRunner'
	args param1
}
	
jar {
	into ("/") {
		from fileTree("src/resources")
	}
}
